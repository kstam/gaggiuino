#ifndef SETTINGS_CONVERTERS_H
#define SETTINGS_CONVERTERS_H

#include "proto/profile_converters.h"
#include "gaggia_settings.h"
#include "nanopb_cpp.h"
#include "settings.pb.h"

using namespace NanoPb::Converter;

/**
 * The below classes are converters that map our own classes to/from protobuf objects.
 * The protobuf objects are autogenerated at build time  based on the *.proto definition files
 * (see settings.proto and profile.proto).
 */
class GaggiaSettingsConverter : public NanoPb::Converter::MessageConverter<GaggiaSettingsConverter, GaggiaSettings, GaggiaSettingsDto, GaggiaSettingsDto_fields> {
public:
  using ProfileArrayConverter = ArrayConverter<ProfileConverter, std::vector<Profile>>;

  static ProtoType encoderInit(const LocalType& local) {
    return GaggiaSettingsDto{
      .has_boiler = true,
      .boiler = BoilerSettingsDto {
        .steamSetPoint = local.boiler.steamSetPoint,
        .offsetTemp = local.boiler.offsetTemp,
        .hpwr = local.boiler.hpwr,
        .mainDivider = local.boiler.mainDivider,
        .brewDivider = local.boiler.brewDivider,
      },
      .has_system = true,
      .system = SystemSettingsDto {
        .powerLineFrequency = local.system.powerLineFrequency,
        .pumpFlowAtZero = local.system.pumpFlowAtZero,
        .scalesF1 = local.system.scalesF1,
        .scalesF2 = local.system.scalesF2,
        .lcdSleep = local.system.lcdSleep,
        .warmupState = local.system.warmupState,
      },
      .has_brew = true,
      .brew = BrewSettingsDto {
        .homeOnShotFinish = local.brew.homeOnShotFinish,
        .brewDeltaState = local.brew.brewDeltaState,
        .basketPrefill = local.brew.basketPrefill,
      },
      .has_profiles = true,
      .profiles = ProfileSettingsDto {
        .activeProfileIndex = local.profiles.activeProfileIndex,
        .savedProfiles = ProfileArrayConverter::encoderCallbackInit(local.profiles.savedProfiles),
      },
      .has_led = true,
      .led = LedSettingsDto {
        .state = local.led.state,
        .has_color = true,
        .color = LedSettingsDto_Color {
          .R = local.led.color.R,
          .G = local.led.color.G,
          .B = local.led.color.B,
        },
      },
    };
  };

  static ProtoType decoderInit(LocalType& local) {
    return GaggiaSettingsDto{
      .profiles = ProfileSettingsDto {
        .savedProfiles = ProfileArrayConverter::decoderCallbackInit(local.profiles.savedProfiles),
      },
    };
  };

  static bool decoderApply(const ProtoType& proto, LocalType& local) {
    local.boiler.steamSetPoint = proto.boiler.steamSetPoint;
    local.boiler.offsetTemp = proto.boiler.offsetTemp;
    local.boiler.hpwr = proto.boiler.hpwr;
    local.boiler.mainDivider = proto.boiler.mainDivider;
    local.boiler.brewDivider = proto.boiler.brewDivider;

    local.system.powerLineFrequency = proto.system.powerLineFrequency;
    local.system.pumpFlowAtZero = proto.system.pumpFlowAtZero;
    local.system.scalesF1 = proto.system.scalesF1;
    local.system.scalesF2 = proto.system.scalesF2;
    local.system.warmupState = proto.system.warmupState;
    local.system.lcdSleep = proto.system.lcdSleep;

    local.brew.homeOnShotFinish = proto.brew.homeOnShotFinish;
    local.brew.brewDeltaState = proto.brew.brewDeltaState;
    local.brew.basketPrefill = proto.brew.basketPrefill;

    local.profiles.activeProfileIndex = proto.profiles.activeProfileIndex;

    local.led.state = proto.led.state;
    local.led.color.R= proto.led.color.R;
    local.led.color.G = proto.led.color.G;
    local.led.color.B = proto.led.color.B;
    return true;
  };
};

#endif
